1.
- return value is [1,2,3]
- last evaluated statement in the blk is "hi", which is truthy for all elements, so all elements are selected

2.
- looking at R. docs for Array#count,
  "If a block is given, counts the number of elements for which the block returns a true value."
- so only elements with str.length < 4 are counted

3.
- return value is [1,2,3]
- rtn val of 'puts num' and blk is always nil, so none of the elements are 'rejected'

4.
- return value is { 'a': 'ant', 'b': 'bear', 'c': 'cat' }
- hash[value[0]] is a key (the 1st letter of each array element in this case)
- the corresponding 'value' is the value of the current array element

5.
- hash.shift removes (shifts out) the 1st hash element
  (returns the shifted-out element as a two-element array)
- try it out in irb (or read the R. docs)

6.
- ['ant', 'bear', 'caterpillar'].pop.size == 11
- pop (w/o an optional arg) returns the last array element 'caterpillar', which has 11 chars

7.
- the blk's rtn val is either T or F, depending on whether or not the 'num' is odd (num.odd? is the last
  evaluated statement in the blk); specifically, the blk returns T, F, T
- the rtn value of any? is T in this example (since 1 and 3 are infact odd nums)
- the output (from the puts num statement) is '1'; iteration terminates once the blk returns a truthy value
  (no need to chk remaining elements)

8.
- arr.take(n) returns the first n elements of the array; the original array is not mutated
- test in irb or read R. docs

9.
- rtn value is [nil, 'bear']
- hash.map { |k, v| k or v expr } returns a single array of values; the array will contain nil elements where
  the expr evaluates to F
- in this case, the expr evaluates to T if v.size > 3

10.
- rtn val is [1, nil, nil]
- rtn val of puts statement is nil, so nil is returned for elements w/ value > 1; otherwise, the element value
  itself is returned
